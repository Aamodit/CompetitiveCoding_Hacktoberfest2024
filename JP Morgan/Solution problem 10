# Problem: Next Permutation

## Problem Description

A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.


Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]
 

Constraints:

- 1 <= nums.length <= 100
- 0 <= nums[i] <= 100

SOLUTION IN C++;


#include <bits/stdc++.h>
using namespace std;

#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define MOD 1000000007
#define MOD1 998244353
#define INF 1e9
#define nl <<"\n"
#define pb push_back
#define popb pop_back
#define mp make_pair
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define set_bits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define sortall(x) sort(all(x))
#define fo(x) for(int i = 0; i < x; i++)
#define foip(x,a) for(int i=0;i<x;i++)cin>>a[i];
#define sp <<" "

typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;

/*-----------------------------------------------JEETU OP-----------------------------------------------------------*/


vector<int> solve(vector<int> a) {
    int n = a.size();
    bool valid_next=false;
    int prev = a[n-1],current,si,sj;
    for(int i = n-2; i >= 0 ; i--){
        current = a[i];
        if(current< prev){
            valid_next=true;
            si=i,sj=i+1;
            break;
        }
    }
    vector<int> ans = a;
    if(!(valid_next)){
        fo(n)ans[n-1-i]=a[i];
    }
    else{
        swap(ans[si],ans[sj]);
    }
    fo(n)cout<<ans[i] sp;
    cout nl;
    return ans;
}

/*
Explaination:
    if the array is reverse sorted it is its maximum lex order so we have to rev array according
    condition;
    else the loop run from the last element until its prev(refers to element before a[i]) element
    is smaller then that if it then swapped them ensure the resultant array is its nex lex order 
    Time complexity O(n);
*/
